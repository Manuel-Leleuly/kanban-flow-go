package main

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "net/http/pprof"

	_ "github.com/Manuel-Leleuly/kanban-flow-go/docs"
	dbhelper "github.com/Manuel-Leleuly/kanban-flow-go/helpers/db"
	"github.com/Manuel-Leleuly/kanban-flow-go/initializer"
	"github.com/Manuel-Leleuly/kanban-flow-go/routes"
	"github.com/sirupsen/logrus"
)

func init() {
	initializer.LoadEnvVariables()
	initializer.CheckAllEnvironmentVariables()
	initializer.InitializeLimiter()
}

//	@title			Kanban Flow Go
//	@version		1.0
//	@description	A simple API for Kanban Flow application
//	@termsOfService	http://swagger.io/terms/

//	@license.name	Apache 2.0
//	@license.url	https://www.apache.org/licenses/LICENSE-2.0.html

//	@host	localhost:3005

//	@securityDefinitions.apikey	ApiKeyAuth
//	@in							header
//	@name						Authorization
//	@description				use access token generated by the login endpoint

func main() {
	// start pprof
	// go func() {
	// 	http.ListenAndServe("localhost:6060", nil)
	// }()

	db := dbhelper.NewDBClient()

	if err := db.ConnectToDB(os.Getenv("DB_NAME")); err != nil {
		logrus.Fatal("[Error] failed to connect to db due to: " + err.Error())
	}

	if err := db.SyncDatabase(); err != nil {
		logrus.Fatal("[Error] failed to sync database due to: " + err.Error())
	}

	port := "3005"
	if os.Getenv("APP_ENV") == "production" {
		port = "8080"
	}
	server := &http.Server{
		Addr:    ":" + port,
		Handler: routes.GetRoutes(db),
	}

	go func() {
		logrus.Infof("Server starting on port %s in %s environment", port, os.Getenv("APP_ENV"))
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			logrus.Fatal("[Error] failed to start Gin server due to: " + err.Error())
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	logrus.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := server.Shutdown(ctx); err != nil {
		logrus.Fatal("[Info] Server forced to shutdown: " + err.Error())
	}
}
