definitions:
  models.ErrorMessage:
    properties:
      message:
        type: string
    type: object
  models.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.TicketCreateRequest:
    properties:
      assignees:
        items:
          type: string
        type: array
      description:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  models.TicketDeleteResponse:
    properties:
      message:
        type: string
    type: object
  models.TicketResponse:
    properties:
      assignees:
        items:
          type: string
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.TicketUpdateRequest:
    properties:
      assignees:
        items:
          type: string
        type: array
      description:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  models.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      status:
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3005
info:
  contact: {}
  description: A simple API for Kanban Flow application
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Kanban Flow Go
  version: "1.0"
paths:
  /iam/v1/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: login
      tags:
      - Auth
  /iam/v1/users:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Create user
      tags:
      - User
  /kanban/v1/tickets:
    get:
      consumes:
      - application/json
      description: Get a list of tickets created by the user stored in the token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Get a list of tickets
      tags:
      - Ticket
    post:
      consumes:
      - application/json
      description: Create a ticket
      parameters:
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.TicketCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Create ticket
      tags:
      - Ticket
  /kanban/v1/tickets/{ticketId}:
    delete:
      consumes:
      - application/json
      description: Delete a ticket
      parameters:
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketDeleteResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Delete ticket
      tags:
      - Ticket
    get:
      consumes:
      - application/json
      description: Get ticket by the ticket ID
      parameters:
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Get ticket by the ticket ID
      tags:
      - Ticket
    put:
      consumes:
      - application/json
      description: Update a ticket
      parameters:
      - description: Ticket ID
        in: path
        name: ticketId
        required: true
        type: string
      - description: Request Body
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/models.TicketUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      security:
      - ApiKeyAuth: []
      summary: Update a ticket
      tags:
      - Ticket
securityDefinitions:
  ApiKeyAuth:
    description: use access token generated by the login endpoint
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
